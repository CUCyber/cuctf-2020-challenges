from Crypto.Util.number import long_to_bytes, inverse

# Fermat factorization attack

n = 16258515801493310694064349481453739396002815561792559656211695934484432570212383143879709035534607060560822982368902441981679656941181392079212090840792301065041934324276314511400815217106946382469269664760178226260793993850022289475777202357573291115251441913644783522399399925002648479572444660634680682091151477624412225664953849433916280919037037259035202453543559210100173124563384525476395751072271681417101878233529211434849379157136586139856960964771242263981583515967006884531961067457238451585619305052692720535382623876458641574797031823071017622594830368139954491786822224118912632965157669950806631078987
e = 65537
c = 6037850196405999552263046311165499003609015425269591596445642431305381697524015973991957498593545770447385694962496354649847558173013389555866747859668459234358448498260410462618837655664942177332703612470856645529213173071385250217683420612143309108526570810284515658439267336825485775855019583053769840973326975656333186894368404793908880927130919976865099175643269258028728221303802494492242636063033438607949937851763579449871578590608138789901473635976208360696588970997159329446558771616808111918115058365058403716469963900561918131866327240836306416928668634983384526101606329901023937045083475069727476599374

def isqrt(n):
    x = n
    y = (x + 1) // 2
    while y < x:
        x = y
        y = (x + n // x) // 2
    return x

def fermat(n):
    a = isqrt(n)
    if a*a == n:
        return [a, a]
    while True:
        b1 = a * a - n
        b = isqrt(b1)
        if b*b == b1:
            break
        else:
            a += 1
    return [a-b, a+b]

p,q = fermat(n)
phi = (p-1) * (q-1)
d = inverse(e,phi)
m = pow(c,d,n)

print(long_to_bytes(m))
