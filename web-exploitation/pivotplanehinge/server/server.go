package main

import (
    "os"
    "time"
    "flag"
    "html/template"
    "log"
    "fmt"
    "io/ioutil"
    "strings"
    "net/http"
    "encoding/json"

    "github.com/gorilla/websocket"
)

var addr = flag.String("addr", "pivotplanehinge.ctf.cuctf.io:8079", "http service address")

func CheckOrigin (r *http.Request) bool {
    if len(r.Header["Origin"]) > 0  {
        if (strings.Contains(r.Header["Origin"][0], "8.8.8.8") && strings.Contains(r.Host, "8.8.8.8")) || (strings.Contains(r.Header["Origin"][0], "pivotplanehinge.ctf.cuctf.io") && strings.Contains(r.Host, "pivotplanehinge.ctf.cuctf.io")) ||  (strings.Contains(r.Header["Origin"][0], "127.0.0.1") && strings.Contains(r.Host, "127.0.0.1")) {
                return true
        }
    }
    return false
}

var upgrader = websocket.Upgrader{
    CheckOrigin: CheckOrigin,
} // use default options

type connectBanner struct {
    IntroText string `json:"introText"`
    ConnectedHosts []string `json:"connectedHosts"`
}

func echo(w http.ResponseWriter, r *http.Request) {
    log.Print("Request /echo : ", r)

    c, err := upgrader.Upgrade(w, r, nil)
    if err != nil {
        log.Print("upgrade:", err)
        return
    }
    defer c.Close()

    // Successfully connected, send connection banner.
    if len(r.Header["Origin"]) > 0 {
        cb := connectBanner{
            IntroText: fmt.Sprintf("Received websocket connect requestm: %v : %v Host: %v", r.Header["Origin"][0], r.Header, r.Host),
            ConnectedHosts: []string{
                fmt.Sprintf("admin 8.8.8.8"),
                fmt.Sprintf("user1 %s", r.Host),
            },
        }
        marshaledCb, err := json.Marshal(cb)
        if err != nil {
            log.Println("failed to marshal json: ", cb, err)
            return
        }

        err = c.WriteMessage(websocket.TextMessage, []byte(marshaledCb))
        if err != nil {
            log.Println("write: ", err, " Host: ", r.Host, " Origin: ", r.Header["Origin"][0] )
        }

        // Run websocket read/write loop
        for {
            mt, message, err := c.ReadMessage()
            if err != nil {
                log.Println("read: ", err, " Host: ", r.Host, " Origin: ", r.Header["Origin"][0] )
                break
            }
            log.Printf("recv: %s Host: %s Origin: %s", strings.TrimSpace(string(message)), r.Host, r.Header["Origin"][0])

            if !strings.Contains(string(message), "cat flag.txt") {
                    err = c.WriteMessage(mt, message)
                    if err != nil {
                        log.Println("write: ", err, " Host: ", r.Host, " Origin: ", r.Header["Origin"][0] )
                        break
                    }
            } else {
                if strings.Contains(r.Header["Origin"][0], "8.8.8.8") {
                    flag, err := os.Open("flag.txt")
                    defer flag.Close()

                    b, err := ioutil.ReadAll(flag)
                    if err != nil {
                        log.Println("unable to open flag.txt")
                        break
                    }
                    err = c.WriteMessage(websocket.TextMessage, []byte(fmt.Sprintf("Congratz, you now know Websocket CSRF: %s",  string(b))))
                    if err != nil {
                        log.Println("write: ", err, " Host: ", r.Host, " Origin: ", r.Header["Origin"][0] )
                        break
                    }
                } else {
                    err = c.WriteMessage(websocket.TextMessage, []byte("upgrade:websocket: request origin not allowed by Upgrader.CheckOrigin"))
                    if err != nil {
                        log.Println("write: ", err, " Host: ", r.Host, " Origin: ", r.Header["Origin"][0] )
                        break
                    }
                }
            }
        }
    } else  {
        err = c.WriteMessage(websocket.TextMessage, []byte("Invalid request."))
        if err != nil {
            log.Println("write: ", err)
        }
        
        // Terminate websocket connection
        c.Close()
    }
    
}

func home(w http.ResponseWriter, r *http.Request) {
    log.Print("Request / : ", r)

    homeTemplate.Execute(w, "ws://"+r.Host+"/echo")
}

func main() {
    flag.Parse()
    log.SetFlags(0)
    http.HandleFunc("/echo", echo)
    http.HandleFunc("/", home)
    http.Handle("/favicon.ico", http.FileServer(http.Dir("static")))
    http.Handle("/Templeos-header.png", http.FileServer(http.Dir("static")))
    http.Handle("/Logo128x152.jpg", http.FileServer(http.Dir("static")))

    s := &http.Server{
        Addr:           ":8079",
        ReadTimeout:    10 * time.Second,
        WriteTimeout:   10 * time.Second,
        MaxHeaderBytes: 1 << 20,
    }
    log.Fatal(s.ListenAndServe())
    //log.Fatal(http.ListenAndServe(*addr, nil))
}

var homeTemplate = template.Must(template.New("").Parse(`
<!DOCTYPE html>
<html>
<head>
    <style>
        .center {
            display: block;
            float: middle;
            margin-left: auto;
            margin-right: auto;
            width: 80%;
        }
        a:link {
            color: darkblue;
            text-decoration: none;
        }
        a:hover {
            color: blue;
            text-decoration: underline;
        }
        a:visited {
            color: darkcyan;
            text-decoration: none;
        }
        button {
            float: middle;
            margin-left: auto;
            margin-right: auto;

            transition-duration: 0.2s;
            -webkit-transition-duration: 0.2s;

            background-color: gold;
            border-width: medium;
            border-color: gold;

            padding: 20px;

            font-size: 18px;
            font-style: italic;
            vertical-align: middle;
        }
        button:hover {
            background-color: darkgoldenrod;
        }
        hr {
            width: medium;
            color: gold;
        }
        h2 {
            font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
        }
        h3 {
            font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
        }
        iframe {
            display: block;
            float: middle;
            margin-left: auto;
            margin-right: auto;

            border-width: medium;
            border-color: gold;
        }
        body {
            background-color: darkslategray;

            font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
            
        }
        #container {
            width: 1000px;
            margin-left: auto;
            margin-right: auto;

            border-style: solid;
            border-width: medium;
            border-color: gold;

            padding: 20px;

            background-color: #55FFFF;/*same as Templeos-header.png*/

            line-height: 175%;

            font-size: 18px;
        }
        #disclaimer {
            display: block;
            float: middle;
            margin-left: auto;
            margin-right: auto;
            width: 825px;

            text-align: center;
            font-size: 18px;
            letter-spacing: 1px;

            margin-bottom: 40px;
        }
        #main {
            margin-bottom: 40px;

            text-align: center;
        }
        #donate {
            display: block;
            float: middle;
            margin-left: auto;
            margin-right: auto;

            text-align: center;
        }
    </style>
<meta charset="utf-8">
<script>  
window.addEventListener("load", function(evt) {

    var output = document.getElementById("output");
    var input = document.getElementById("input");
    var ws;

    var print = function(message) {
        var d = document.createElement("div");
        d.textContent = message;
        output.appendChild(d);
    };

    document.getElementById("open").onclick = function(evt) {
        if (ws) {
            return false;
        }
        ws = new WebSocket("{{.}}");
        ws.onopen = function(evt) {
            print("OPEN");
        }
        ws.onclose = function(evt) {
            print("CLOSE");
            ws = null;
        }
        ws.onmessage = function(evt) {
            print("RESPONSE: " + evt.data);
        }
        ws.onerror = function(evt) {
            print("ERROR: websocket connect request could not be processed: " + evt.data);
        }
        return false;
    };

    document.getElementById("send").onclick = function(evt) {
        if (!ws) {
            return false;
        }
        print("SEND: " + input.value);
        ws.send(input.value);
        return false;
    };

    document.getElementById("close").onclick = function(evt) {
        if (!ws) {
            return false;
        }
        ws.close();
        return false;
    };

    document.getElementById("cat-flag").onclick = function(evt) {
        if (!ws) {
            return false;
        }
        print("SEND: " + "cat flag.txt");
        ws.send("cat flag.txt");
        return false;
    };

});

<!-- V2pKV01HUkhhSEJqZVRVMVpFY3hkVnBETldwaU1qQTk= -->

</script>
<title>pivotplanehinge</title>
</head>
<body style="text-align: center">
    </td><td valign="top">
    <div id="output"></div>
    </td></tr>
    <div id="container">
        <div id="heading">
            <img src="Templeos-header.png" alt="Temple Operating System" class="center" width=650>
        </div>
        <div id="dowload">
            <a href="https://templeos.org/Downloads/TempleOS.ISO" style="text-decoration: none;">
            <button type="button"><img src="Logo128x152.jpg" width=30 style="vertical-align: middle; 
            margin-right: 10px;">Download the free, public domain, 64-bit operating system, Temple Operating System.
            <img src="Logo128x152.jpg" width=30 style="vertical-align: middle; margin-left: 10px;"></button>
            </a>        
        </div>
        <table>
            <tr><td valign="top">
            <p>Click "Open" to create a connection to the server, 
            "Send" to send a command to the server and "Close" to close the connection. 
            You can change the message and send multiple times.
            Click "cat flag.txt" to send the command "cat flag.txt"
            <p>
            <form>
            <button id="open">Open</button>
            <button id="close">Close</button>
            <button id="cat-flag">cat flag.txt</button>
            <p><input id="input" type="text" value="Hello world!">
            <button id="send">Send</button>
            </form>
            <hr>
        </table>
</body>
    <hr>
    <footer>
      <div style="display: none">The templeos.org domain and website are maintained by trapexit</div>
      <p id="disclaimer">
    All content related to Terry A. Davis, TempleOS, J Operating System, SparrowOS, or LoseThos should be considered public domain.
      </p>
    </footer>
</html>
`))
